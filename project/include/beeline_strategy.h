/**
* @file beeline_strategy.h
*/

#ifndef BEELINE_STRATEGY
#define BEELINE_STRATEGY

/************************************************************
* Includes
************************************************************/
#include <vector> 
#include <string>
#include "path_strategy.h"
#include "vector3d.h"

namespace csci3081 {

/**
 * @brief A concrete strategy class to represent the beeline path behavior
 * */
class Beeline : public pathInterface{
    public:
        /**
         * @brief Constructor for creating a Beeline strategy object
         *
         * @param[in] name The name of the path the drone will follow
         **/
        Beeline(std::string name= "Beeline"){
        this->name = name; 
        }

       /**
        * @brief A function to return a beeline path
        *
        * @param[in] origin The origin point of the desired path
        * @param[in] destination The destination point of the desired path
        * @param[in] graph The graph representing the simulation
        *
        * @returns A beeline path
        * */
       std::vector<std::vector<float>> doPath(std::vector<float> origin,
                                              std::vector<float> destination,
                                              const IGraph* graph = NULL) override;

        /**
         * @brief A setter method to set the speed of the entity travelling on the
         * beeline path
         *
         * @param[in] speed The entity's speed
         * */
        void setSpeed(float speed) override;

        /**
         * @brief A getter method to return the type of path generated by the beeline
         * object
         *
         * @returns The name of the type of path
         * */
        const std::string getName() override;

    private:
        float speed;   
        std::string name;                                           
};


}

#endif
